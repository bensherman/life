q
sq
c
exit
new_cells
q
n
new_cells
c
s
new_cells
@cells
c
exit
neighbor
n
s
alive_neighbors
alive_neigbors
location
neighbor
cells[neighbor]&.alive?
n
location
@alive
alive
n
s
neighbor
alive_neighbors
n
s
location
s
@alive
s
n
alive_neighbors
n
s
n
s
q
n
new_cells
cells
n
s
grid.cells.select{|k,v| v.alive?}
grid.cells.fetch Location.new([0,1])
grid.fetch Location.new([0,1])
grid.fetch Location.new(0,1)
grid.cells.select{|k,v| v.alive?}
grid
c
grid.cells.select{|k,v| v.alive?}
grid.cells{}
grid.cells
grid.cells.select{|x| x.alive}
grid.cells.select{|x| x.alive?}
grid.cells.select(|x| x.alive?)
grid.cells.select(|x| x.alive?}
grid.cells.filter
grid.cells where
grid.cells
grid.cells.fetch Location.new([0,1])
grid.cells.fetch Location.new([1,0])
grid.cells.fetch Location.new([1,1])
grid.cells.get Location.new([1,1])
grid.cells
grid
s
exit
c
exit
n
s
location
alive_neighbors
alive_neigbors
n
s
n
s
q
continue
cells
n
q
n
s
cells
location
s
n
cells
exit
new_cells
@new_cells
cells
continue
q
c
n
s
c
exit
Location.new(neighbor)
Location.new(neighbor.coords)
Location.new(neighbor)
neighbor
exit
neighbor
cells
c
exit
location.coords
new_cells
c
exit
new_cells
new_cells[Location.new(1,2)] = Cell.new()
new_cells
cells
new_cells[[1,2]] = Location.new(1,2)
new_cells
cells
new_cells[[1,2]] = Cell.new()
new_cells
cells
s
exit
new_grid.cells
cells
c
@y
@x
x
s
cells
new_cells
s
exit
self[0,1]
self
sel
